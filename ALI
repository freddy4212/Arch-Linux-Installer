#!/bin/bash
#
#Name : Arch Linux Installer
#Version : 0.9.190630
#Describe : A Simple Installer for Arch Linux Install which follow the official wiki indication.
#Author : freddy4212 (freddy4212@gmail.com)
#Website : 
#License : 
#Changlog:
#

backtit(){
	verinfo="ver0.9.190630"
	backtit="Arch Linux Installer $verinfo ("$blmode")"
}

#(0 Menu Function)
mainmenu(){
	progresscheck
	selectmain=$(whiptail --backtitle "$backtit" --default-item "$mainnextitem" --menu "$mainmenutxt" --nocancel --ok-button "$enterbut" --title "$mainmenutit" 0 0 0 \
	"$onenum" "$netmenutit" \
	"$twonum" "$diskmenutit" \
	"$threenum" "$installgaugetit" \
	"$fournum" "$confmenutit" \
	"" "$exitchecktit" \
	3>&1 1>&2 2>&3)
	mainitem
	maincase
}
maincase(){
	case $selectmain in
		"1" )
			netmenu
			mainmenu
			;;
		"2" )
			diskmsg
			diskmenu
			mainmenu
			;;
		"3" )
			progresscheckinstall
			mainmenu
			;;
		"4" )
			progresscheckconf
			mainmenu
			;;
		"" )
			exitcheck
			;;
		* )
			execagainyesno
			if [ "$execagain" == 0 ]; then
				selectmain=$(echo "$selectmain" | sed 's/*//')
				maincase
			else
				mainmenu
			fi
			;;
	esac
}
netmenu(){
	selectnet=$(whiptail --backtitle "$backtit" --default-item "$netnextitem" --menu "$netmenutxt" --nocancel --ok-button "$enterbut" --title "$netmenutit""(1/5)" 0 0 0 \
	"$setnetnum" "$setnettit" \
	"$setmirrornum" "$setmirrortit" \
	"" "$backmainmenutit" \
	3>&1 1>&2 2>&3)
	netitem
	netcase
}
netcase(){
	case $selectnet in
		"1" )
			netcheck
			netmenu
			;;
		"2" )
			mirrorcountry
			mirrorserver
			netmenu
			;;
		"" )
			progressaddnet
			;;
		* )
			execagainyesno
			if [ "$execagain" == 0 ]; then
				selectnet=$(echo "$selectnet" | sed 's/*//')
				netcase
			else
				netmenu
			fi
			;;
	esac
}
diskmenu(){
	syncdiskinfo
	selectdisk=$(whiptail --backtitle "$backtit" --default-item "$disknextitem" --menu "$diskmenutxt""$diskinfo" --nocancel --ok-button "$enterbut" --title "$diskmenutit""(2/5)" 0 0 0 \
	"1" "$partitiondevtit" \
	"2" "$formatdevtit" \
	"3" "$mountdevtit" \
	"" "$backmainmenutit" \
	3>&1 1>&2 2>&3)
	diskitem
	diskcase
}
diskcase(){
	case $selectdisk in
		"1" )
			selectdevtype="disk"
			selectdevtit="$selectdisktit"
			selectdev
			cfdisk $selectdevname
			diskmenu
			;;
		"2" )
			selectdevtype="partition"
			selectdevtit="$selectformattit"
			selectdev
			selectformat
			diskmenu
			;;
		"3" )
			selectdevtype="partition"
			selectdevtit="$selectmounttit"
			selectdev
			selectmount
			diskmenu
			;;
		"" )
			twonum="2*"
			;;
	esac
}
confmenu(){
	selectconf=$( whiptail --backtitle "$backtit" --default-item "$confnextitem" --menu "$confmenutxt" --nocancel --ok-button "$enterbut" --title "$confmenutit""(4/5)" 0 0 0 \
	"$genfstabnum" "$genfstabtit" \
	"$languagenum" "$languagetit" \
	"$kblayoutnum" "$kblayouttit" \
	"$timezonenum" "$timezonetit" \
	"$hostnamenum" "$hostnametit" \
	"$rootpwnum" "$rootpwtit" \
	"$addusrnum" "$addusrtit" \
	"$blinstallnum" "$bltyinstalltit" \
	"" "$backmainmenutit" \
	3>&1 1>&2 2>&3)
	confitem
	confcase
}
confcase(){
	case $selectconf in
		"1" )
			makefstab
			confmenu
			;;
		"2" )
			language
			confmenu
			;;
		"3" )
			kblayout
			confmenu
			;;
		"4" )
			region
			timezone
			confmenu
			;;
		"5" )
			sethostname
			confmenu
			;;
		"6" )
			rootpw
			confmenu
			;;
		"7" )
			addusr
			confmenu
			;;
		"8" )
			blinstall
			confmenu
			;;
		"" )
			progressaddconf
			;;
		* )
			execagainyesno
			if [ "$execagain" == 0 ]; then
				selectconf=$(echo "$selectconf" | sed 's/*//')
				confcase
			else
				confmenu
			fi
			;;
	esac
}

#(1 Network)
netcheck(){
	#進度列
	ping -c 5 archlinux.org > ping | netcheckinfo
	ping=$(grep -F '5 packets transmitted, 5 received' ping)
	rm -f ping
	if [ "$ping" != "" ]; then
		netmsgtxt="$netokmsgtxt" && netmsgbut="$okbut" && netmsg
		timedatectl set-ntp true
		setnetnum="1*"
	else
		netmsgtxt="$neterrormsgtxt" && netmsgbut="$exitbut" && netmsg
		clear
		exit
	fi
}
mirrorcountry(){
	awk '/## /{print}' /etc/pacman.d/mirrorlist > mirrorlist
	sed -i 's/## //' mirrorlist
	sed -i '1,3d' mirrorlist
	sort mirrorlist -o mirrorlist
	uniq mirrorlist > countrylist
	sed -i 's/ /_/g' countrylist
	countryarray=()
	items=$(cat countrylist)
	for item in $items; do
		selitem=$(echo $item | sed 's/_/ /g')
		countryarray+=("$selitem" "")
	done
	rm -f mirrorlist
	rm -f countrylist
	mirrorcountrymenu
}
mirrorserver(){
	awk '/## '"$selectcountry"'/{print;getline;print}' /etc/pacman.d/mirrorlist > serverlist
	sed -i '/## '"$selectcountry"'/d' serverlist
	sed -i 's/Server = //' serverlist
	serverlistarray=()
	items=$(cat serverlist)
	for item in $items; do
		serverlistarray+=("$item" "")
	done
	rm -f serverlist
	mirrorservermenu
	if [ $exitstatus == 0 ];then
		setserver
		setmirrornum="2*"
	fi
}
setserver(){
	selectcountry="## "$selectcountry
	selectserver="Server = "$selectserver
	rm -f delserver
	echo $selectcountry"\n"$selectserver >> delserver
	sed -i -e 's/\//\\\//g' delserver
	sed -i -e 's/\$/\\\$/g' delserver
	sed -i '/'"$selectcountry"'/{N;/'"$(cat delserver)"'/d}' /etc/pacman.d/mirrorlist
	sed -i -e '6a\'"$selectserver"'' /etc/pacman.d/mirrorlist 
	sed -i -e '6a\'"$selectcountry"'' /etc/pacman.d/mirrorlist
	rm -f delserver
}

#(2 Disk)
selectdev() {
	selectdevarray=()
	if [ "$selectdevtype" == "disk" ]; then
		items=$disklist
		for item in $items; do
			selectdevarray+=("$item" "")
		done
	else
		items=$partitionlist
		for item in $items; do
			selectdevarray+=("$item" "")
		done
	fi
	selectdevmenu
	selectdevname=$(echo "$selectdevname")
	selectdevnum=$(echo "$selectdevname" | sed 's/[a-z]//g' | sed 's/\///g')
	selectdevdisk=$(echo "$selectdevname" | sed 's/[0-9]//g')
}
selectformat(){
	formatdevmenu
	if [ "$selectfs" == "ext4 (Recommend)" ]; then
		selectfs="ext4"
	fi
	if [ "$selectfs" == "vfat (ESP)" ]; then
		selectfs="vfat"
	fi
	if [ "$selectfs" != "" ];then
		formatcheckyesno
		if [ "$formatcheck" == 0 ]; then
			umountdev
			formatdev > /dev/null 2>&1 | formatinginfo
			setdonemsgtit="$formatseldevtit""$selectdevname""$toseldevtit""$selectfs" && setdonemsg
		fi
	fi
}
selectmount(){
	formatmount
	if [ "$formatmount" == "pss" ];then
		mountdevmenu
		if [ "$selectmp" == "/ (Required)" ]; then
			selectmp="/"
		fi
		if [ "$selectmp" == "/boot (ESP)" ]; then
			selectmp="/boot"
		fi
		if [ "$selectmp" != "" ];then
			if [ "$selectmp" != "DON'T Mount" ]; then
				mountwholecheck
			else
				umountdev
			fi
		fi
	fi
}
formatdev(){
	#進度列
	case $selectfs in
		"btrfs")
			mkfs.btrfs -f $selectdevname
			flag="20"
			setpartflag
		;;
		"ext3")
			mkfs.ext3 -F $selectdevname
			flag="20"
			setpartflag
		;;
		"ext4")
			mkfs.ext4 -F $selectdevname
			flag="20"
			setpartflag
		;;
		"swap")
			swapoff -a
			mkswap $selectdevname
			swapon $selectdevname
			flag="19"
			setpartflag
		;;
		"vfat")
			mkfs.vfat -F32 $selectdevname
			flag="1"
			setpartflag
		;;
		"xfs")
			mkfs.xfs -f $selectdevname
			flag="20"
			setpartflag
		;;
		"GRUB Reserved")
			mkfs.vfat -F32 $selectdevname
			flag="4"
			setpartflag
		;;
	esac
	sleep 1
}
mountdev(){
	case $selectmp in
		"/")
			umountdev
			umount -l -f -q /mnt
			mount $selectdevname /mnt
		;;
		"/boot")
			umountdev
			mkdir /mnt/boot
			umount -l -f -q /mnt/boot
			mount $selectdevname /mnt/boot
		;;
		"/home")
			umountdev
			mkdir /mnt/home
			umount -l -f -q /mnt/home
			mount $selectdevname /mnt/home
		;;
		"/var")
			umountdev
			mkdir /mnt/var
			umount -l -f -q /mnt/var
			mount $selectdevname /mnt/var
		;;
		"/data")
			umountdev
			mkdir /mnt/data
			umount -l -f -q /mnt/data
			mount $selectdevname /mnt/data
		;;
		"swap")
			swapoff -a
			mkswap $selectdevname
			swapon $selectdevname
			flag="19"
			setpartflag
		;;
	esac
}
setpartflag(){
	echo "t
	$selectdevnum
	$flag
	w
	" | fdisk $selectdevdisk
}
umountdev() {
	if [ "$(lsblk -f $selectdevname | awk 'NR==2{print $4}')" == "[SWAP]" ]; then
		swapoff $selectdevname
	fi
	if [ "$(lsblk -f $selectdevname | awk 'NR==2{print $6}')" != "" ]; then
		umount -l -f -q $(lsblk -f $selectdevname | awk 'NR==2{print $6}')
	fi
}
mountwholecheck(){
	grubmount
	if [ "$grubmount" == "pss" ];then
		swapmount
		if [ "$swapmount" == "pss" ];then
			rootmount
			if [ "$rootmount" == "pss" ];then
				mountdev > /dev/null 2>&1
			fi
		fi
	fi
}
formatmount(){
	diskfs=$(lsblk -f $selectdevname | awk 'NR==2{print $2}')
	if [ "$diskfs" == "" ]; then
		mountmsgtxt="$formatmountmsgtxt" && mountmsg
		formatmount="err"
	else
		formatmount="pss"
	fi
}
rootmount(){
	if [ "$selectmp" != "/" ] && [ "$selectmp" != "swap" ];then
		linenum=$(mount | awk '{print $3}' | grep -n -Fx "/mnt" | awk 'BEGIN{FS=":"}NR==1{print $1}')
		if [ "$linenum" == "" ]; then
			mountmsgtxt="$rootmountmsgtxt" && mountmsg
			rootmount="err"
		else
			rootmount="pss"
		fi
	else
		rootmount="pss"
	fi
}
swapmount(){
	if [ "$selectmp" != "swap" ]; then
		if [ "$(lsblk -f $selectdevname | awk 'NR==2{print $2}')" == "swap" ]; then
			mountmsgtxt="$swapmountmsgtxt" && mountmsg
			swapmount="err"
		else
			swapmount="pss"
		fi
	else
		swapmount="pss"
	fi
}
grubmount(){
	grubmountcheck=$(echo "$canboot" | grep -F "$selectdevname")
		if [ "$grubmountcheck" == "" ];then
			grubmount="pss"
		else
			mountmsgtxt="$grubmountmsgtxt" && mountmsg
			bootcheck="err"
		fi
}

#(3 Install)
installwholecheck() {
	#進度列
	rootdir
	rootcheck
	if [ "$rootcheck" == "pss" ]; then
		sizecheck
		if [ "$sizecheck" == "pss" ]; then
			bootcheck
			if [ "$bootcheck" == "pss" ]; then
				installsystem
			else
				mainnextitem="2*"
			fi
		else
			mainnextitem="2*"
		fi
	else
		mainnextitem="2*"
	fi
}
rootcheck(){
	if [ "$linenum" == "" ]; then
		installmsgtxt="$rootcheckmsgtxt" && installmsg
		rootcheck="err"
	else
		rootcheck="pss"
	fi
}
sizecheck(){
	rootsize=$(df -B1 "$rootdir" | awk 'NR==2{print $4}')
	if [ "$rootsize" -lt "4294967296" ]; then
		installmsgtxt="$sizecheckmsgtxt" && installmsg
		sizecheck="err"
	else
		sizecheck="pss"
	fi
}
bootcheck(){
	if [ "$bltype" == "uefi" ];then
		bootlinenum=$(mount | awk '{print $3}' | grep -n -Fx "/mnt/boot" | awk 'BEGIN{FS=":"}NR==1{print $1}')
		bootdir=$(mount | awk 'NR=='"$bootlinenum"'{print $1}')
		bootfs=$(lsblk -f $bootdir | awk 'NR==2{print $2}')
		if [ "$bootlinenum" == "" ] || [ "$bootfs" != "vfat" ]; then
			installmsgtxt="$bootcheckmsgtxt" && installmsg
			bootcheck="err"
		else
			bootcheck="pss"
		fi
	else
		syncdiskinfo
		rootdirdisk=$(echo "$rootdir" | sed 's/[0-9]//g')
		grubreservedcheck=$(echo "$canboot" | grep -F "$rootdirdisk")
		if [ "$grubreservedcheck" == "" ];then
			installmsgtxt="$bootcheckmsgtxt" && installmsg
			bootcheck="err"
		else
			bootcheck="pss"
		fi
	fi
}
installsystem(){
	#進度列
	installstartmsg

	#安裝程式
	mkdir -m 0755 -p /mnt/var/{cache/pacman/pkg,lib/pacman,log} /mnt/{dev,run,etc}
	mkdir -m 1777 -p /mnt/tmp
	mkdir -m 0555 -p /mnt/{sys,proc}
	mount proc "/mnt/proc" -t proc -o nosuid,noexec,nodev
	mount sys "/mnt/sys" -t sysfs -o nosuid,noexec,nodev,ro
	mount udev "/mnt/dev" -t devtmpfs -o mode=0755,nosuid
	mount devpts "/mnt/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec
	mount shm "/mnt/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev
	mount /run "/mnt/run" --bind
	mount tmp "/mnt/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid
	if [ "$bltype" == "uefi" ];then
		mount efivarfs "/mnt/sys/firmware/efi/efivars" -t efivarfs -o nosuid,noexec,nodev
	fi

	{
		k=0
		i=0
		pacman -Sy > /dev/null 2>&1 
		pacman -Sg base base-devel > installpkg
		sed -i 's/base //g' installpkg
		sed -i 's/base-devel //g' installpkg
		#pacman -r /mnt -Sy --cachedir=/mnt/var/cache/pacman/pkg --noconfirm base base-devel
		items=$(cat installpkg)
		for ((i = 0; i <= 16; i++ ));do
			sleep 0.5
			echo $i
		done
		for item in $items; do
			pacman -r /mnt -Sy --cachedir=/mnt/var/cache/pacman/pkg --noconfirm $item > /dev/null 2>&1 
			if [ "$k" ==  0 ]; then
				k=1
				i=24
			else
				(( i++ ))
			fi
			echo $i
		done
	} | whiptail --backtitle "$backtit" --gauge "$installgaugetxt" --title "$installgaugetit""(3/5)" 0 0 0

	arch-chroot /mnt pacman -Scc --noconfirm > /dev/null 2>&1
	cp -a /etc/pacman.d/gnupg "/mnt/etc/pacman.d/"
	cp -a /etc/pacman.d/mirrorlist "/mnt/etc/pacman.d/"
	umount -l -f -q /mnt/proc
	umount -l -f -q /mnt/sys
	umount -l -f -q /mnt/dev
	umount -l -f -q /mnt/run
	umount -l -f -q /mnt/tmp
	rm -f installpkg


	installdonemsg
	onenum="1*"
	twonum="2*"
	threenum="3*"
}

#(4 Configure)
makefstab(){
	genfstab -U /mnt >> /mnt/etc/fstab
	genfstabnum="1*"
}
language(){
	ls /usr/share/i18n/locales  -l |awk '{print $9}' > language
	languagearray=()
	items=$(cat language)
	rm -f language
	for item in $items; do
		languagearray+=("$item" "")
	done
	languagemenu
	if [ $exitstatus == 0 ];then
		setlanguage > /dev/null 2>&1 | setlanginfo
		languagenum="2*"
	else
		confnextitem="2"
	fi
}
setlanguage(){
	#進度列
	arch-chroot /mnt sed -i 's/#en_US.UTF-8/en_US.UTF-8/g' /etc/locale.gen
	arch-chroot /mnt sed -i 's/#'"$selectlanguage"'.UTF-8/'"$selectlanguage"'.UTF-8/g' /etc/locale.gen
	echo "LANG=""$selectlanguage"".UTF-8" > /mnt/etc/locale.conf
	arch-chroot /mnt locale-gen
}
kblayout(){
	localectl list-keymaps > kblayout
	kblayoutarray=()
	items=$(cat kblayout)
	rm -f kblayout
	for item in $items; do
		kblayoutarray+=("$item" "")
	done
	kblayoutmenu
	if [ $exitstatus == 0 ];then
		echo "KEYMAP=""$selectkblayout" > /mnt/etc/vconsole.conf
		kblayoutnum="3*"
	else
		confnextitem="3"
	fi
}
region(){
	ls /usr/share/zoneinfo -l |grep "^d" |awk '{print $9}' > zoneinfo
	regionarray=()
	items=$(cat zoneinfo)
	rm -f zoneinfo
	for item in $items; do
		regionarray+=("$item" "")
	done
	regionmenu
}
timezone(){
	ls /usr/share/zoneinfo/$selectregion > timezone
	timezonearray=()
	items=$(cat timezone)
	rm -f timezone
	for item in $items; do
		timezonearray+=("$item" "")
	done
	timezonemenu
	if [ $exitstatus == 0 ];then
		settimezone
		timezonenum="4*"
	else
		confnextitem="4"
	fi
}
settimezone(){
	arch-chroot /mnt ln -sf /usr/share/zoneinfo/$selectregion/$selecttimezone /etc/localtime
	hwclock --systohc
}
sethostname(){
	sethostnameinpbx
	if [ $exitstatus == 0 ];then
		inputcontent="$inputhostname"
		blankcheck
		if [ "$blankcheck" == "pss" ]; then
			echo $inputhostname > /mnt/etc/hostname
			arch-chroot /mnt systemctl enable dhcpcd
			setdonemsgtit="$hostnametit" && setdonemsg
			hostnamenum="5*"
		else
			confnextitem="5"
		fi
	else
		confnextitem="5"
	fi
}
rootpw(){
	rootpwinpbx
	if [ $exitstatus == 0 ];then
		inputcontent="$inputrootpw"
		blankcheck
		if [ "$blankcheck" == "pss" ]; then
			retypeone="$inputrootpw"
			retyperootpwinpbx
			retypetwo="$inputretyperootpw"
			retypecheck
			if [ "$retypecheck" == "pss" ]; then
				echo "root:$inputrootpw" | arch-chroot /mnt chpasswd
				setdonemsgtit="$rootpwtit" && setdonemsg
				rootpwnum="6*"
			else
				confnextitem="6"
			fi
		else
			confnextitem="6"
		fi
	else
		confnextitem="6"
	fi
}
addusr(){
	addusrinpbx
	if [ $exitstatus == 0 ];then
		inputcontent="$inputusrname"
		blankcheck
		if [ "$blankcheck" == "pss" ]; then
			usrexistcheck
			if [ "$usrexistcheck" == "pss" ]; then
				usrpw
			else
				confnextitem="7"
			fi
		else
			confnextitem="7"
		fi
	else
		confnextitem="7"
	fi
}
usrexistcheck(){
	cat /etc/passwd | awk -F ":" '{print $1}' > userlist
	u=$(grep "$inputusrname" userlist)
	rm -f userlist
	if [ "$u" == "" ]; then
		usrexistcheck="pss"
	else
		usrexistcheckmsg
		usrexistcheck="err"
	fi
}
usrpw(){
	usrpwinpbx
	if [ $exitstatus == 0 ];then
		inputcontent="$inputusrpw"
		blankcheck
		if [ "$blankcheck" == "pss" ]; then
			retypeone="$inputusrpw"
			retypeusrpwinpbx
			retypetwo="$inputretypeusrpw"
			retypecheck
			if [ "$retypecheck" == "pss" ]; then
				arch-chroot /mnt useradd -m -G wheel $inputusrname
				sed -i 's/# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/g' /mnt/etc/sudoers
				echo "$inputusrname:$inputusrpw" | arch-chroot /mnt chpasswd
				setdonemsgtit="$addusrtit" && setdonemsg
				addusrnum="7*"
			else
				confnextitem="7"
			fi
		else
			confnextitem="7"
		fi
	else
		confnextitem="7"
	fi
}
blinstall(){
	#進度列
	if [ "$bltype" == "uefi" ]; then
		{
		arch-chroot /mnt bootctl --path=/boot install > /dev/null 2>&1
		sleep 1
	} | installblinfo
		cp -f /usr/share/systemd/bootctl/arch.conf /mnt/boot/loader/entries
		blkid -s PARTUUID -o value "$rootdir" > partuuid
		partuuid=$(cat partuuid)
		rm -f partuuid
		sed -i 's/PARTUUID=XXXX/PARTUUID='"$partuuid"' rw/' /mnt/boot/loader/entries/arch.conf
		rootfs=$(lsblk -f $rootdir | awk 'NR==2{print $2}')
		if [ "$rootfs" == "btrfs" ];then
			sed -i 's/rootfstype=XXXX add_efi_memmap/rootflags=subvol=\//' /mnt/boot/loader/entries/arch.conf
		else
			sed -i 's/rootfstype=XXXX add_efi_memmap//' /mnt/boot/loader/entries/arch.conf
		fi
	else
		{
			arch-chroot /mnt pacman -S grub --noconfirm > /dev/null 2>&1
		} | installblinfo
		{
		echo $rootdir > grubdir
		sed -i 's/[0-9]//g' grubdir
		grubdir=$(cat grubdir)
		rm -f grubdir
		arch-chroot /mnt grub-install --target=i386-pc "$grubdir" > /dev/null 2>&1
		arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg > /dev/null 2>&1
		} | installblinfo
	fi
	blinstallnum="8*"
}

#(Menu)
mirrorcountrymenu(){
	selectcountry=$(whiptail --backtitle "$backtit" --menu "" --nocancel --ok-button "$selectbut" --title "$mirrorcountrytit" 0 0 0 \
	"${countryarray[@]}" \
	3>&1 1>&2 2>&3)
}
mirrorservermenu(){
	selectserver=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$setmirrortit" 0 0 0 \
	"${serverlistarray[@]}" \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
selectdevmenu(){
	selectdevname=$(whiptail --backtitle "$backtit" --menu "" --nocancel --ok-button "$selectbut" --title "$selectdevtit" 0 0 0 \
	"${selectdevarray[@]}" \
	3>&1 1>&2 2>&3)	
}
formatdevmenu(){
	selectfs=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$formatseldevtit""$selectdevname""$toseldevtit" 0 0 0 \
	"btrfs" "" \
	"ext3" "" \
	"ext4 (Recommend)" "" \
	"swap" "" \
	"vfat (ESP)" "" \
	"xfs" "" \
	"GRUB Reserved" "" \
	3>&1 1>&2 2>&3)
}
mountdevmenu(){
	selectmp=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$mountseldevtit""$selectdevname""$toseldevtit" 0 0 0 \
	"/ (Required)" "" \
	"/boot (ESP)" "" \
	"/home" "" \
	"/var" "" \
	"/data" "" \
	"swap" "" \
	"DON'T Mount" "" \
	3>&1 1>&2 2>&3)
}
languagemenu(){
	selectlanguage=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$languagetit" 0 0 0 \
	"${languagearray[@]}" \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
kblayoutmenu(){
	selectkblayout=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$kblayouttit" 0 0 0 \
	"${kblayoutarray[@]}" \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
regionmenu(){
	selectregion=$(whiptail --backtitle "$backtit" --menu "" --nocancel --ok-button "$selectbut" --title "$regiontit" 0 0 0 \
	"${regionarray[@]}" \
	3>&1 1>&2 2>&3)
}
timezonemenu(){
	selecttimezone=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$timezonetit" 0 0 0 \
	"${timezonearray[@]}" \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}

#(Message Box)
welcomemsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$welcomemsgtxt" --ok-button "$okbut" --title "$welcomemsgtit" 0 0
}
netmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$netmsgtxt" --ok-button "$netmsgbut" --title "$setnettit" 0 0
}
diskmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$diskmsgtxt" --ok-button "$okbut" --title "$diskmsgtit" 0 0
}
installstartmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$installstartmsgtxt""$rootdir""$installstartmsgtxttwo" --ok-button "$okbut" --title "$installgaugetit""(3/5)" 0 0
}
installdonemsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$installdonemsgtxt" --ok-button "$okbut" --title "$installgaugetit""(3/5)" 0 0
}
setdonemsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$setdonemsgtxt" --ok-button "$okbut" --title "$setdonemsgtit" 0 0
}
exitrebootmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$exitrebootmsgtxt" --ok-button "$rebootbut" --title "$exitchecktit" 0 0
}
progresscheckmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$progresscheckmsgtxt" --ok-button "$okbut" --title "$progresscheckmsgtit" 0 0
}
mountmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$mountmsgtxt" --ok-button "$okbut" --title "$mounterrormsgtit" 0 0
}
installmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$installmsgtxt" --ok-button "$okbut" --title "$installerrormsgtit" 0 0
}
blankcheckmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$blankcheckmsgtxt" --ok-button "$okbut" --title "$blankcheckmsgtit" 0 0
}
retypecheckmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$retypecheckmsgtxt" --ok-button "$okbut" --title "$retypecheckmsgtit" 0 0
}
usrexistcheckmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$usrexistcheckmsgtxt" --ok-button "$okbut" --title "$usrexistcheckmsgtit" 0 0
}

#(Yesno Box)
execagainyesno(){
	execagain=$(whiptail --backtitle "$backtit" --defaultno --no-button "$nobut" --title "$execagainyesnotit" --yesno "$execagainyesnotxt" --yes-button "$yesbut" 0 0 \
	3>&1 1>&2 2>&3 value=$?)
	execagain=$?
}
exitrecheckyesno(){
	exityesno=$(whiptail --backtitle "$backtit" --defaultno --no-button "$nobut" --title "$exitchecktit" --yesno "$exityesnotxt" --yes-button "$yesbut" 0 0 \
	03>&1 1>&2 2>&3 value=$?)
	exityesno=$?
}
formatcheckyesno(){
	formatcheck=$(whiptail --backtitle "$backtit" --defaultno --no-button "$nobut" --title "$formatseldevtit""$selectdevname""$toseldevtit""$selectfs" --yesno "$formatcheckyesnotxt""$selectdevname""$formatcheckyesnotxttwo" --yes-button "$yesbut" 0 0 \
	3>&1 1>&2 2>&3 value=$?)
	formatcheck=$?
}

#(Input Box)
sethostnameinpbx(){
	inputhostname=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --inputbox "$hostnametxt" --ok-button "$okbut" --title "$hostnametit" 0 0 \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
rootpwinpbx(){
	inputrootpw=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --ok-button "$okbut" --passwordbox "$rootpwtxt" --title "$rootpwtit" 8 0 \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
retyperootpwinpbx(){
	inputretyperootpw=$(whiptail --backtitle "$backtit" --nocancel --ok-button "$okbut" --passwordbox "$retyperootpwtxt" --title "$retyperootpwtit" 8 0 \
	3>&1 1>&2 2>&3)
}
addusrinpbx(){
	inputusrname=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut"  --inputbox "$addusrtit" --ok-button "$okbut" --title "$addusrtit" 0 0 \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
usrpwinpbx(){
	inputusrpw=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --ok-button "$okbut" --passwordbox "$usrpwtxt""$inputusrname""$usrpwtxttwo" --title "$usrpwtit""$inputusrname""$usrpwtittwo" 8 0 \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
retypeusrpwinpbx(){
	inputretypeusrpw=$(whiptail --backtitle "$backtit" --nocancel --ok-button "$okbut" --passwordbox "$retypeusrpwtxt""$inputusrname""$retypeusrpwtxttwo" --title "$retypeusrpwtit""$inputusrname""$retypeusrpwtittwo" 8 0 \
	3>&1 1>&2 2>&3)
}

#(Info box)
netcheckinfo(){
	whiptail --backtitle "$backtit" --infobox "$detectnetworkinfo" 7 0
}
formatinginfo(){
	whiptail --backtitle "$backtit" --infobox "$formatdiskinfo""$selectdevname""$formatdiskinfotwo""$selectfs""$formatdiskinfothree" 7 0
}
loaddiskinfo(){
	whiptail --backtitle "$backtit" --infobox "$loaddiskinfo" 7 0
}
installblinfo(){
	whiptail --backtitle "$backtit" --infobox "$installblinfo" 7 0
}
setlanginfo(){
	whiptail --backtitle "$backtit" --infobox "$setlanginfo" 7 0
}
#installinginfo(){
#	whiptail --backtitle "$backtit" --infobox "$installgaugetxt" 7 0
#}

#(Other)
syncdiskinfo(){
	#進度列
	#Disk List
	ls /dev/[sh]d* -l |awk '{print $10}' > disk
	sed -i 's/[0-9]//g' disk
	uniq disk > disklist
	rm -f disk
	#Partition List
	rm -f partitionlist
	rm -f diskallpart
	rm -f boottype
	rm -f canboot
	items=$(cat disklist)
	for item in $items; do
		lsblk -l "$item" -o NAME -n | awk 'NR>1' >> partitionlist
		lsblk -l "$item" -o NAME -n >> diskallpart
		fdisk -l "$item" | awk 'NR>9{print $6}' >> boottype
	done
	sed -i 's/^/\/dev\//' partitionlist
	sed -i 's/^/\/dev\//' diskallpart
	#GRUB Reserved
	grep -n -Fx "BIOS" boottype | awk 'BEGIN{FS=":"}NR>0{print $1}' > bootlinenum
	echo "" > canboot
	items=$(cat bootlinenum)
	for item in $items; do
		cat partitionlist | awk 'NR=='"$item"'{print $1}' >> canboot
	done
	rm -f boottype
	rm -f bootlinenum
	#Generate Disk Info
	rm -f diskinfo
	{
	items=$(cat diskallpart)
	for item in $items; do
		itemtypecheck=$(echo "$item" | sed 's/[a-z]//g' | sed 's/\///g')
		if [ "$itemtypecheck" == "" ]; then
			itemtype="disk"
		else
			itemtype="part"
		fi
		partname=$item
		for (( b=$(echo ${#partname}); b<12; b++ )); do
				partname=$partname"%"
		done
		partsize=$(lsblk $item | awk 'NR==2{print $4}')
		for (( b=$(echo ${#partsize}); b<8; b++ )); do
				partsize=$partsize"%"
		done
		partfs=$(lsblk -f $item | awk 'NR==2{print $2}')
		if [ "$partfs" == "" ]; then
			if [ "$itemtype" == "disk" ]; then
				partfs="%%%%%%%%%%%%%%%%"
			else
				partfs="Not Formatted"
			fi
		fi
		for (( b=$(echo ${#partfs}); b<16; b++ )); do
			partfs=$partfs"%"
		done
		partmp=$(lsblk -f $item | awk 'NR==2{print $6}')
		partswap=$(lsblk -f $item | awk 'NR==2{print $4}')
		if [ "$partmp" == "" ]; then
			if [ "$itemtype" == "disk" ]; then
				partmp="%%%%%%%%%%%%%%%%"
			else
				partmp="Not Mounted"
			fi
		fi
		if [ "$partswap" == "[SWAP]" ]; then
			partmp="swap"
		fi
		for (( b=$(echo ${#partmp}); b<16; b++ )); do
			partmp=$partmp"%"
		done
		#GRUB Reserved
		grubreserved=$(grep -Fx "$item" canboot)
		if [ "$grubreserved" != "" ]; then
			partfs="GRUB Reserved%%%"
			partmp="GRUB Reserved%%%"
		fi
		echo "	""$partname""	""$partsize""	""$partfs""	""$partmp" >> diskinfo
	done
	sleep 0.5
	} | loaddiskinfo
	sed -i 's/%/ /g' diskinfo
	sed -i 's/\/mnt/\/mnt\//g' diskinfo
	sed -i 's/\/\//\//g' diskinfo
	sed -i 's/\/mnt//g' diskinfo
	diskinfo=$(cat diskinfo)
	disklist=$(cat disklist)
	partitionlist=$(cat partitionlist)
	canboot=$(cat canboot)
	rm -f diskinfo
	rm -f disklist
	rm -f partitionlist
	rm -f diskallpart
	rm -f canboot
}
rootdir() {
	linenum=$(mount | awk '{print $3}' | grep -n -Fx "/mnt" | awk 'BEGIN{FS=":"}NR==1{print $1}')
	rootdir=$(mount | awk 'NR=='"$linenum"'{print$1}')
}
detectefi(){
	if [ -x /sys/firmware/efi/efivars ]; then
		bltype="uefi"
		blmode="UEFI Mode"
		diskmsgtxt="$diskmsguefitxt"
		bltyinstalltit="$blinstalluefitit"
	else
		bltype="bios"
		blmode="BIOS Mode"
		diskmsgtxt="$diskmsgbiostxt"
		bltyinstalltit="$blinstallbiostit"
	fi
}
exitcheck(){
	if [ "$progress" == "1234" ]; then
		installgnome
		exitrebootmsg
		umount -l -f -q /mnt
		clear
		reboot
		exit
	else
		exitrecheckyesno
		if [ "$exityesno" != 0 ]; then
			mainmenu
			clear
		fi
	fi
}
blankcheck(){
	if [ "$inputcontent" == "" ]; then
		blankcheckmsg
		blankcheck="err"
	else
		blankcheck="pss"
	fi
}
retypecheck(){
	if [ "$retypeone" == "$retypetwo" ]; then
		retypecheck="pss"
	else
		retypecheckmsg
		retypecheck="err"
	fi
}

#(Progress Control)
progresscheck(){
	if [ "$onenum" == "1*" ]; then
		progress="1"
	fi
	if [ "$twonum" == "2*" ]; then
		progress="2"
	fi
	if [ "$onenum" == "1*" ] && [ "$twonum" == "2*" ]; then
		progress="12"
	fi
	if [ "$onenum" == "1*" ] && [ "$twonum" == "2*" ] && [ "$threenum" == "3*" ]; then
		progress="123"
	fi
	if [ "$onenum" == "1*" ] && [ "$twonum" == "2*" ] && [ "$threenum" == "3*" ] && [ "$fournum" == "4*" ]; then
		progress="1234"
	fi
}
progresscheckinstall(){
	case $progress in
		"1")
			progresscheckmsgtxt="$progresscheckdiskmsgtxt" && progresscheckmsg
			mainnextitem="2"
			;;
		"2")
			progresscheckmsgtxt="$progresschecknetmsgtxt" && progresscheckmsg
			mainnextitem="1"
			;;
		"12")
			installwholecheck
			;;
		"")
			progresscheckmsgtxt="$progresschecknetdiskmsgtxt" && progresscheckmsg
			mainnextitem="1"
			;;
	esac
}
progresscheckconf(){
	case $progress in
		"123")
			confmenu
			;;
		"1234")
			confmenu
			;;
		*)
			progresscheckmsgtxt="$progresscheckmsgconftxt" && progresscheckmsg
			mainnextitem="3"
			;;
	esac
}
progressaddnet(){
	if [ "$setnetnum" == "1*" ] && [ "$setmirrornum" == "2*" ]; then
		onenum="1*"
	fi
}
progressaddconf(){
	if [ "$genfstabnum" == "1*" ] && [ "$languagenum" == "2*" ] && [ "$kblayoutnum" == "3*" ] && [ "$timezonenum" == "4*" ] && [ "$hostnamenum" == "5*" ] && [ "$rootpwnum" == "6*" ] && [ "$addusrnum" == "7*" ] && [ "$blinstallnum" == "8*" ]; then
		fournum="4*"
	fi
}
nextitemstart(){
	mainnextitem="1"
	netnextitem="1"
	disknextitem=""
	confnextitem="1"
}
menuitemstart(){
	onenum="1"
	twonum="2"
	threenum="3"
	fournum="4"
	setnetnum="1"
	setmirrornum="2"
	genfstabnum="1"
	languagenum="2"
	kblayoutnum="3"
	timezonenum="4"
	hostnamenum="5"
	rootpwnum="6"
	addusrnum="7"
	blinstallnum="8"
}
diskitem(){
	disknextitem="$selectdisk"
}
netitem(){
	#Which items have been done?
	newnetarray=()
	netarray=("$setnetnum" "$setmirrornum")
	n=0
	for (( i=0; i<${#netarray[@]}; i++ )); do
		netstar=$(echo "${netarray[$i]}" | grep -F "*")
		if [ "$netstar" == "" ]; then
			newnetarray[$n]=${netarray[$i]}
			(( n++ ))
		fi
	done
	if [ "$selectnet" == "" ];then
		#If select item is "",do the first item which haven't been done.
		netnextitem="${newnetarray[0]}"
	else
		#If select item not "",see the item have or haven't done by "*".
		netstar=$(echo "$selectnet" | grep -F "*")
		if [ "$netstar" != "" ]; then
			#If item have "*" means done,after re-exec back to original item.
			netnextitem="$selectnet"
		else
			#If item doesn't have "*", go to next item.
			netnextitem=$(($selectnet + 1))
			nextnetstar=$(echo ${netarray[$(($netnextitem - 1))]} | grep -F "*")
			if [ "$nextnetstar" != "" ]; then
				#If next item have "*", go to the first item which haven't been done.
				netnextitem="${newnetarray[1]}"
			else
				#If next item too much, go to the first item which haven't been done.
				if [ "$netnextitem" -gt "2" ]; then
					netnextitem=""
				fi
			fi
		fi
	fi
}
confitem(){
	newconfarray=()
	confarray=("$genfstabnum" "$languagenum" "$kblayoutnum" "$timezonenum" "$hostnamenum" "$rootpwnum" "$addusrnum" "$blinstallnum")
	n=0
	for (( i=0; i<${#confarray[@]}; i++ )); do
		confstar=$(echo "${confarray[$i]}" | grep -F "*")
		if [ "$confstar" == "" ]; then
			newconfarray[$n]=${confarray[$i]}
			(( n++ ))
		fi
	done
	if [ "$selectconf" == "" ];then
		confnextitem="${newconfarray[0]}"
	else
		confstar=$(echo "$selectconf" | grep -F "*")
		if [ "$confstar" != "" ]; then
			confnextitem="$selectconf"
		else
			confnextitem=$(($selectconf + 1))
			nextconfstar=$(echo ${confarray[$(($confnextitem - 1))]} | grep -F "*")
			if [ "$nextconfstar" != "" ]; then
				confnextitem="${newconfarray[1]}"
			else
				if [ "$confnextitem" -gt "8" ]; then
					confnextitem=""
				fi
			fi
		fi
	fi
}
mainitem(){
	newmainarray=()
	mainarray=("$onenum" "$twonum" "$threenum" "$fournum")
	if [ "$selectmain" == "" ];then
		mainnextitem=""
	else
		mainstar=$(echo "$selectmain" | grep -F "*")
		if [ "$mainstar" != "" ]; then
			mainnextitem="$selectmain"
		else
			mainnextitem=$(($selectmain + 1))
			nextmainstar=$(echo ${mainarray[$(($mainnextitem - 1))]} | grep -F "*")
			if [ "$mainnextitem" -gt "4" ]; then
				mainnextitem=""
			else
				if [ "$nextmainstar" != "" ]; then
					mainnextitem="$mainnextitem""*"
				fi
			fi
		fi
	fi
}

#(Language)
langenus(){
	#Main Menu Title
	mainmenutit="Main Menu"
	netmenutit="Network Setting"
	diskmenutit="Disk Partition"
	confmenutit="System Configuration"

	#Main Menu Text
	mainmenutxt="Please select an item to execution.\n* means this item had been exectuted."
	netmenutxt="This part will help you done the network and mirror server settings.\n* means this item had been exectuted."
	diskmenutxt="This part will help you partition the disks, format the partitions and mount them.\nList of the available disk and partitions:\n\n	[List Items]	[Size]  	[Format]        	[Mount Point]   \n"
	confmenutxt="This part will help you done the localization and personalize settings.\n* means this item had been exectuted."

	#Network Title
	setnettit="Confirm The Network Setting"
	setmirrortit="Set The Mirror Server"
	mirrorcountrytit="Select Your Country"

	#Network Text
	netokmsgtxt="Network setting confirmed."
	neterrormsgtxt="Please set the network connection before the system installation.\nThe installer will stop."

	#Disk Title
	diskmsgtit="Partition Instruction"
	partitiondevtit="Manual Partition (cfdisk)"
	formatdevtit="Format The Partitions"
	mountdevtit="Mount The File Systems"
	selectdisktit="Select A Disk To Partition"
	selectformattit="Select A Partition To Format"
	selectmounttit="Select A Partition To Mount"
	formatseldevtit="Format "
	mountseldevtit="Mount "
	toseldevtit=" To "
	mounterrormsgtit="Mount Error"

	#Disk Text
	diskmsguefitxt="The 2 partitions are necessary:\n\n1. Partition the system partition and mount it on /.\n   The system installation requires at least 4.5 GiB of free space.\n\n2. Partition a ESP (EFI System Partition) and mount it on /boot.\n   The size of ESP is about 256-512 MiB and the format is VFAT.\n\nPS: Swap space or an independent /home partition is optional."
	diskmsgbiostxt="The 2 partitions are necessary:\n\n1. Partition the system partition and mount it on /.\n   The system installation requires at least 4.5 GiB of free space.\n\n2. Partition a 1 MiB space and format it to GRUB Reserved at the same disk as /.\n   And the GRUB Reserved doesn't need to mount.\n\nPS: Swap space or an independent /home partition is optional."
	formatcheckyesnotxt="All data on "
	formatcheckyesnotxttwo=" will be lost."
	rootmountmsgtxt="Haven't set the / mount point."
	swapmountmsgtxt="You can't use a swap partition as a mount point."
	formatmountmsgtxt="Format the partition before mount it."
	grubmountmsgtxt="You can't use a GRUB Reserved partition as a mount point."

	#Install Title
	installgaugetit="System Installation"
	installerrormsgtit="Install Error"
	
	#Install Text
	installgaugetxt="Please wait while installation in progress..."
	rootcheckmsgtxt="The / mount point is required for system installation."
	sizecheckmsgtxt="System installation requires at least 4.5 GiB of free space."
	bootcheckmsgtxt="You haven't set the boot partition or GRUB Reserved."

	installstartmsgtxt="The system will be downloaded and installed to "
	installstartmsgtxttwo="."
	installdonemsgtxt="Installation complete."

	#Configure First Level Title
	genfstabtit="Generate A Fstab File"
	languagetit="Set The Language"
	kblayouttit="Set The Keyboard Layout"
	regiontit="Select Your Region"
	timezonetit="Set The Timezone"
	hostnametit="Set The Hostname"
	rootpwtit="Set The Root Password"
	addusrtit="Creat An Account"
	blinstalluefitit="Install systemd-boot (UEFI)"
	blinstallbiostit="Install GRUB (BIOS)"

	#Configure First Level Text
	hostnametxt="Please type the hostname."
	rootpwtxt="Please type the root password."
	addusrtxt="Please type the user's name to create an account."

	#Configure Second Level Title
	retyperootpwtit="Re-type The Root Password"
	usrpwtit="Set "
	usrpwtittwo="'s Password"
	retypeusrpwtit="Re-type "
	retypeusrpwtittwo="'s Password"

	#Configure Second Level Text
	retyperootpwtxt="Please re-type the root password to confirm."
	usrpwtxt="Please type "
	usrpwtxttwo="'s password."
	retypeusrpwtxt="Please re-type "
	retypeusrpwtxttwo="'s password to confirm."


	#Others Title
	welcomemsgtit="Welcome"
	exitchecktit="Exit The Installer"
	progresscheckmsgtit="Something Haven't Done"
	execagainyesnotit="Had Been Exectuted"
	blankcheckmsgtit="Nothing Input"
	retypecheckmsgtit="Password Not Match"
	usrexistcheckmsgtit="User Exist"


	backmainmenutit="Back To The Main Menu"

	#Others Text
	welcomemsgtxt="Welcome to the Arch Linux Installer.\nThis application will help you install the Arch Linux.\nPlease be sure to confirm that the network connection is available.\n\nUse UP and Down arrows to navigate menus.\nUse TAB to switch buttons.\nUse ENTER to execute the selected item."
	exityesnotxt="Installation hasn't been completed, are you sure to exit the installer?"
	exitrebootmsgtxt="Don't forget to remove the installation media to avoid re-entering the installer."
	progresschecknetdiskmsgtxt="The network setting and disk partition haven't done."
	progresschecknetmsgtxt="The network setting haven't done."
	progresscheckdiskmsgtxt="The disk partition haven't done."
	progresscheckmsgconftxt="The system installation haven't done."
	execagainyesnotxt="This item had been exectuted, do you want to exectute again?"
	blankcheckmsgtxt="Please confirm the input content."
	retypecheckmsgtxt="The passwords entered twice are different."
	usrexistcheckmsgtxt="The user name is exist."

	setdonemsgtxt="Done."

	#Info Text
	loaddiskinfo="Syncing the partitions..."
	formatdiskinfo="Formating "
	formatdiskinfotwo=" to "
	formatdiskinfothree=" ..."
	detectnetworkinfo="Detecting the network..."
	installblinfo="Installing the boot loader..."
	setlanginfo="Setting the language..."

	#Buttons
	enterbut="Enter"
	exitbut="Exit"
	backbut="Back"
	selectbut="Select"
	okbut="Ok"
	cancelbut="Cancel"
	yesbut="Yes"
	nobut="No"
	rebootbut="Reboot"
}

#Gnome
installgnome(){
	#進度列
	wantgnome=$( whiptail --backtitle "$backtit" --defaultno --no-button "$nobut" --title "Install the Gnome Desktop Environment" --yesno "Do you want to install the Gnome Desktop Environment ?" --yes-button "$yesbut" 0 0 \
	3>&1 1>&2 2>&3 value=$?)
	wantgnome=$?
	if [ "$wantgnome" == "0" ]; then
		{
			k=0
			i=0
			arch-chroot /mnt pacman -Sg gnome > packages
			sed -i 's/gnome //g' packages
			echo "bash-completion" >> packages
			echo "gnome-software-packagekit-plugin" >> packages
			echo "adobe-source-han-sans-tw-fonts" >> packages
			echo "adobe-source-han-sans-cn-fonts" >> packages
			echo "ibus-chewing" >> packages
			items=$(cat packages)

			for ((i = 0; i <= 15; i++ ));do
				sleep 0.5
				echo $i
			done

			for item in $items; do
				arch-chroot /mnt pacman -S $item --noconfirm > /dev/null 2>&1 
				if [ "$k" ==  0 ]; then
					k=1
					i=29
				else
					(( i++ ))
				fi
				echo $i
			done

		} | whiptail --backtitle "$backtit" --gauge "Installing the Gnome Desktop Environment..." 0 0 0
		arch-chroot /mnt pacman -Scc --noconfirm > /dev/null 2>&1
		#arch-chroot /mnt pacman -S --noconfirm virtualbox-guest-modules-arch virtualbox-guest-utils
		arch-chroot /mnt systemctl enable gdm.service
		echo "NoDisplay=true" >> /mnt/usr/share/applications/avahi-discover.desktop
		echo "NoDisplay=true" >> /mnt/usr/share/applications/qv4l2.desktop
		echo "NoDisplay=true" >> /mnt/usr/share/applications/qvidcap.desktop
		echo "NoDisplay=true" >> /mnt/usr/share/applications/org.freedesktop.IBus.Setup.desktop
		echo "NoDisplay=true" >> /mnt/usr/share/applications/bssh.desktop
		echo "NoDisplay=true" >> /mnt/usr/share/applications/bvnc.desktop
		rm -f packages
	fi
}

#(Execute)
clear
langenus
detectefi
backtit
welcomemsg
menuitemstart
nextitemstart
mainmenu