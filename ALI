#!/bin/bash
#
#Name : Arch Linux Installer
#Version : 0.7.190628
#Describe : A Simple Installer for Arch Linux Install which follow the official wiki indication.
#Author : freddy4212 (freddy4212@gmail.com)
#Website : 
#License : 
#Changlog:
#

backtit(){
	verinfo="ver0.9.190630"
	backtit="Arch Linux Installer $verinfo ("$blmode")"
}

#(0 Main Menu)
mainmenu(){
	inmainmenu
	case $selectmain in
		"1")
			nextitem="2"
			subnextitem="1"
			netmenu
			mainmenu
		;;
		"1*")
			nextitem="1*"
			subnextitem="1"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				netmenu
			fi
			mainmenu
		;;
		"2")
			nextitem="3"
			subnextitem="1"
			diskmsg
			diskmenu
			mainmenu
		;;
		"2*")
			nextitem="2*"
			subnextitem="1"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				diskmsg
				diskmenu
			fi
			mainmenu
		;;
		"3")
			progresscheckinstall
			mainmenu
		;;
		"3*")
			nextitem="3*"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				installwholecheck
			fi
			mainmenu
		;;
		"4")
			progresscheckconf
			mainmenu
		;;
		"4*")
			nextitem="4*"
			subnextitem="1"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				confmenu
			fi
			mainmenu
		;;
		"")
			exitcheck
		;;
	esac
}

#(1 Network)
netmenu(){
	innetmenu
	case $selectnet in
		"1")
			subnextitem="2"
			netcheck
			netmenu
		;;
		"1*")
			subnextitem="1*"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				netcheck
			fi
			netmenu
		;;
		"2")
			subnextitem=""
			mirrorcountry
			mirrorserver
			netmenu
		;;
		"2*")
			subnextitem="2*"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				mirrorcountry
				mirrorserver
			fi
			netmenu
		;;
		"")
			progressaddnet
		;;
	esac
}
netcheck(){
	ping -c 5 archlinux.org > ping
	ping=$(grep -F '5 packets transmitted, 5 received' ping)
	rm -f ping
	if [ "$ping" != "" ]; then
		netokmsg
		timedatectl set-ntp true
		setnetnum="1*"
	else
		neterrormsg
		#clear
		exit
	fi
}
mirrorcountry(){
	awk '/## /{print}' /etc/pacman.d/mirrorlist > mirrorlist
	sed -i 's/## //' mirrorlist
	sed -i '1,3d' mirrorlist
	sort mirrorlist -o mirrorlist
	uniq mirrorlist > countrylist
	sed -i 's/ /_/g' countrylist
	countryarray=()
	items=$(cat countrylist)
	for item in $items; do
		selitem=$(echo $item | sed 's/_/ /g')
		countryarray+=("$selitem" "")
	done
	rm -f mirrorlist
	rm -f countrylist
	mirrorcountrymenu
}
mirrorserver(){
	awk '/## '"$selectcountry"'/{print;getline;print}' /etc/pacman.d/mirrorlist > serverlist
	sed -i '/## '"$selectcountry"'/d' serverlist
	sed -i 's/Server = //' serverlist
	serverlistarray=()
	items=$(cat serverlist)
	for item in $items; do
		serverlistarray+=("$item" "")
	done
	rm -f serverlist
	mirrorservermenu
	if [ $exitstatus == 0 ];then
		setserver
		setmirrornum="2*"
	else
		subnextitem="2"
	fi
}
setserver(){
	selectcountry="## "$selectcountry
	selectserver="Server = "$selectserver
	rm -f delserver
	echo $selectcountry"\n"$selectserver >> delserver
	sed -i -e 's/\//\\\//g' delserver
	sed -i -e 's/\$/\\\$/g' delserver
	sed -i '/'"$selectcountry"'/{N;/'"$(cat delserver)"'/d}' /etc/pacman.d/mirrorlist
	sed -i -e '6a\'"$selectserver"'' /etc/pacman.d/mirrorlist 
	sed -i -e '6a\'"$selectcountry"'' /etc/pacman.d/mirrorlist
	rm -f delserver
}

#(2 Disk)
diskmenu(){
	indiskmenu
	case $selectdisk in
		"1")
			subnextitem="1"
			selectdevtype="disk"
			selectdevtit="$selectdisktit"
			selectdev
			cfdisk $selectdevname
			diskmenu
		;;
		"2")
			subnextitem="2"
			selectdevtype="partition"
			selectdevtit="$selectformattit"
			selectdev
			selectformat
			diskmenu
		;;
		"3")
			subnextitem="3"
			selectdevtype="partition"
			selectdevtit="$selectmounttit"
			selectdev
			selectmount
			diskmenu
		;;
		"")
			progressadddisk
		;;
	esac
}
selectdev() {
	selectdevarray=()
	if [ "$selectdevtype" == "disk" ]
	then
		items=$disklist
		for item in $items; do
			selectdevarray+=("$item" "")
		done
	else
		items=$partitionlist
		for item in $items; do
			selectdevarray+=("$item" "")
		done
	fi
	selectdevmenu
	selectdevname=$(echo "$selectdevname")
	selectdevnum=$(echo "$selectdevname" | sed 's/[a-z]//g' | sed 's/\///g')
	selectdevdisk=$(echo "$selectdevname" | sed 's/[0-9]//g')
}
selectformat(){
	formatdevmenu
	if [ "$selectfs" == "ext4 (Recommend)" ]; then
		selectfs="ext4"
	fi
	if [ "$selectfs" == "vfat (ESP)" ]; then
		selectfs="vfat"
	fi
	if [ "$selectfs" != "" ];then
		formatcheckyesno
		if [ "$formatcheck" == 0 ]; then
			umountdev
			formatdev
			setdonemsgtit="$formatseldevtit""$selectdevname""$toseldevtit""$selectfs" && setdonemsg
		fi
	fi
}
formatdev(){
	case $selectfs in
		"btrfs")
			mkfs.btrfs -f $selectdevname
			flag="20"
			setpartflag
		;;
		"ext3")
			mkfs.ext3 -F $selectdevname
			flag="20"
			setpartflag
		;;
		"ext4")
			mkfs.ext4 -F $selectdevname
			flag="20"
			setpartflag
		;;
		"swap")
			swapoff -a
			mkswap $selectdevname
			swapon $selectdevname
			flag="19"
			setpartflag
		;;
		"vfat")
			mkfs.vfat -F32 $selectdevname
			flag="1"
			setpartflag
		;;
		"xfs")
			mkfs.xfs -f $selectdevname
			flag="20"
			setpartflag
		;;
		"GRUB Reserved")
			mkfs.vfat -F32 $selectdevname
			flag="4"
			setpartflag
		;;
	esac
}
setpartflag(){
	echo "t
	$selectdevnum
	$flag
	w
	" | fdisk $selectdevdisk
}
selectmount(){
	formatmount
	if [ "$formatmount" == "pss" ];then
		mountdevmenu
		if [ "$selectmp" == "/ (Required)" ]; then
			selectmp="/"
		fi
		if [ "$selectmp" == "/boot (ESP)" ]; then
			selectmp="/boot"
		fi
		if [ "$selectmp" != "" ];then
			if [ "$selectmp" != "DON'T Mount" ]; then
				mountwholecheck
			else
				umountdev
			fi
		fi
	fi
}
mountdev(){
	case $selectmp in
		"/")
			umountdev
			umount -l -f -q /mnt
			mount $selectdevname /mnt
		;;
		"/boot")
			umountdev
			mkdir /mnt/boot
			umount -l -f -q /mnt/boot
			mount $selectdevname /mnt/boot
		;;
		"/home")
			umountdev
			mkdir /mnt/home
			umount -l -f -q /mnt/home
			mount $selectdevname /mnt/home
		;;
		"/var")
			umountdev
			mkdir /mnt/var
			umount -l -f -q /mnt/var
			mount $selectdevname /mnt/var
		;;
		"/data")
			umountdev
			mkdir /mnt/data
			umount -l -f -q /mnt/data
			mount $selectdevname /mnt/data
		;;
		"swap")
			swapoff -a
			mkswap $selectdevname
			swapon $selectdevname
			flag="19"
			setpartflag
		;;
	esac
}
umountdev() {
	if [ "$(lsblk -f $selectdevname | awk 'NR==2{print $4}')" == "[SWAP]" ]; then
		swapoff $selectdevname
	fi
	if [ "$(lsblk -f $selectdevname | awk 'NR==2{print $6}')" != "" ]; then
		umount -l -f -q $(lsblk -f $selectdevname | awk 'NR==2{print $6}')
	fi
}
mountwholecheck(){
	grubmount
	if [ "$grubmount" == "pss" ];then
		swapmount
		if [ "$swapmount" == "pss" ];then
			rootmount
			if [ "$rootmount" == "pss" ];then
				mountdev
			fi
		fi
	fi
}
formatmount(){
	diskfs=$(lsblk -f $selectdevname | awk 'NR==2{print $2}')
	if [ "$diskfs" == "" ]; then
		mountmsgtxt="$formatmountmsgtxt" && mountmsg
		formatmount="err"
	else
		formatmount="pss"
	fi
}
rootmount(){
	if [ "$selectmp" != "/" ] && [ "$selectmp" != "swap" ];then
		linenum=$(mount | awk '{print $3}' | grep -n -Fx "/mnt" | awk 'BEGIN{FS=":"}NR==1{print $1}')
		if [ "$linenum" == "" ]; then
			mountmsgtxt="$rootmountmsgtxt" && mountmsg
			rootmount="err"
		else
			rootmount="pss"
		fi
	else
		rootmount="pss"
	fi
}
swapmount(){
	if [ "$selectmp" != "swap" ]; then
		if [ "$(lsblk -f $selectdevname | awk 'NR==2{print $2}')" == "swap" ]; then
			mountmsgtxt="$swapmountmsgtxt" && mountmsg
			swapmount="err"
		else
			swapmount="pss"
		fi
	fi
}
grubmount(){
	grubmountcheck=$(echo "$canboot" | grep -F "$selectdevname")
		if [ "$grubmountcheck" == "" ];then
			grubmount="pss"
		else
			mountmsgtxt="$grubmountmsgtxt" && mountmsg
			bootcheck="err"
		fi
}

#(3 Install)
installwholecheck() {
	rootdir
	rootcheck
	if [ "$rootcheck" == "pss" ]; then
		sizecheck
		if [ "$sizecheck" == "pss" ]; then
			bootcheck
			if [ "$bootcheck" == "pss" ]; then
				installsystem
			else
				nextitem="2*"
			fi
		else
			nextitem="2*"
		fi
	else
		nextitem="2*"
	fi
}
rootcheck(){
	if [ "$linenum" == "" ]; then
		installmsgtxt="$rootcheckmsgtxt" && installmsg
		rootcheck="err"
		nextitem="2*"
	else
		rootcheck="pss"
	fi
}
sizecheck(){
	rootsize=$(df -B1 "$rootdir" | awk 'NR==2{print $4}')
	if [ "$rootsize" -lt "4294967296" ]; then
		installmsgtxt="$sizecheckmsgtxt" && installmsg
		sizecheck="err"
		nextitem="2*"
	else
		sizecheck="pss"
	fi
}
bootcheck(){
	if [ "$bltype" == "uefi" ];then
		bootlinenum=$(mount | awk '{print $3}' | grep -n -Fx "/mnt/boot" | awk 'BEGIN{FS=":"}NR==1{print $1}')
		if [ "$bootlinenum" == "" ] || [ "$diskfs" != "vfat" ]; then
			installmsgtxt="$bootcheckmsgtxt" && installmsg
			bootcheck="err"
			nextitem="2*"
		else
			bootcheck="pss"
		fi
	else
		syncdiskinfo
		rootdirdisk=$(echo "$rootdir" | sed 's/[0-9]//g')
		grubreservedcheck=$(echo "$canboot" | grep -F "$rootdirdisk")
		if [ "$grubreservedcheck" == "" ];then
			installmsgtxt="$bootcheckmsgtxt" && installmsg
			bootcheck="err"
			nextitem="2*"
		else
			bootcheck="pss"
		fi
	fi
}
installsystem(){
	installstartmsg
	pacstrap /mnt base base-devel
	arch-chroot /mnt pacman -Scc --noconfirm
	installdonemsg
	onenum="1*"
	twonum="2*"
	threenum="3*"
	progress="123"
}

#(4 Configure)
confmenu(){
	inconfmenu
	case $selectconf in
		"1")
			subnextitem="2"
			genfstab -U /mnt >> /mnt/etc/fstab
			genfstabnum="1*"
			confmenu
		;;
		"1*")
			subnextitem="1*"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				genfstab -U /mnt >> /mnt/etc/fstab
				genfstabnum="1*"
			fi
			confmenu
		;;
		"2")
			subnextitem="3"
			language
			confmenu
		;;
		"2*")
			subnextitem="2*"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				language
			fi
			confmenu
		;;
		"3")
			subnextitem="4"
			kblayout
			confmenu
		;;
		"3*")
			subnextitem="3*"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				kblayout
			fi
			confmenu
		;;
		"4")
			subnextitem="5"
			region
			timezone
			confmenu
		;;
		"4*")
			subnextitem="4*"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				region
				timezone
			fi
			confmenu
		;;
		"5")
			subnextitem="6"
			sethostname
			confmenu
		;;
		"5*")
			subnextitem="5*"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				sethostname
			fi
			confmenu
		;;
		"6")
			subnextitem="7"
			rootpw
			confmenu
		;;
		"6*")
			subnextitem="6*"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				rootpw
			fi
			confmenu
		;;
		"7")
			subnextitem="8"
			addusr
			confmenu
		;;
		"7*")
			subnextitem="7*"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				addusr
			fi
			confmenu
		;;
		"8")
			subnextitem=""
			blinstall
			confmenu
		;;
		"8*")
			subnextitem="8*"
			execagainyesno
			if [ "$execagain" == 0 ]; then
				blinstall
			fi
			confmenu
		;;
		"")
			progressaddconf
		;;
	esac
}
language(){
	ls /usr/share/i18n/locales  -l |awk '{print $9}' > language
	languagearray=()
	items=$(cat language)
	rm -f language
	for item in $items; do
		languagearray+=("$item" "")
	done
	languagemenu
	if [ $exitstatus == 0 ];then
		setlanguage
		languagenum="2*"
	else
		subnextitem="2"
	fi
}
setlanguage(){
	arch-chroot /mnt sed -i 's/#en_US.UTF-8/en_US.UTF-8/g' /etc/locale.gen
	arch-chroot /mnt sed -i 's/#'"$selectlanguage"'.UTF-8/'"$selectlanguage"'.UTF-8/g' /etc/locale.gen
	echo "LANG=""$selectlanguage"".UTF-8" > /mnt/etc/locale.conf
	arch-chroot /mnt locale-gen
}
kblayout(){
	localectl list-keymaps > kblayout
	kblayoutarray=()
	items=$(cat kblayout)
	rm -f kblayout
	for item in $items; do
		kblayoutarray+=("$item" "")
	done
	kblayoutmenu
	if [ $exitstatus == 0 ];then
		echo "KEYMAP=""$selectkblayout" > /mnt/etc/vconsole.conf
		kblayoutnum="3*"
	else
		subnextitem="3"
	fi
}
region(){
	ls /usr/share/zoneinfo -l |grep "^d" |awk '{print $9}' > zoneinfo
	regionarray=()
	items=$(cat zoneinfo)
	rm -f zoneinfo
	for item in $items; do
		regionarray+=("$item" "")
	done
	regionmenu
}
timezone(){
	ls /usr/share/zoneinfo/$selectregion > timezone
	timezonearray=()
	items=$(cat timezone)
	rm -f timezone
	for item in $items; do
		timezonearray+=("$item" "")
	done
	timezonemenu
	if [ $exitstatus == 0 ];then
		settimezone
		timezonenum="4*"
	else
		subnextitem="4"
	fi
}
settimezone(){
	arch-chroot /mnt ln -sf /usr/share/zoneinfo/$selectregion/$selecttimezone /etc/localtime
	hwclock --systohc
}
sethostname(){
	sethostnameinpbx
	if [ $exitstatus == 0 ];then
		inputcontent="$inputhostname"
		blankcheck
		if [ "$blankcheck" == "pss" ]; then
			echo $inputhostname > /mnt/etc/hostname
			arch-chroot /mnt systemctl enable dhcpcd
			setdonemsgtit="$hostnametit" && setdonemsg
			hostnamenum="5*"
			subnextitem="6"
		else
			subnextitem="5"
		fi
	else
		subnextitem="5"
	fi
}
rootpw(){
	rootpwinpbx
	if [ $exitstatus == 0 ];then
		inputcontent="$inputrootpw"
		blankcheck
		if [ "$blankcheck" == "pss" ]; then
			retypeone="$inputrootpw"
			retyperootpwinpbx
			retypetwo="$inputretyperootpw"
			retypecheck
			if [ "$retypecheck" == "pss" ]; then
				echo "root:$inputrootpw" | arch-chroot /mnt chpasswd
				setdonemsgtit="$rootpwtit" && setdonemsg
				rootpwnum="6*"
				subnextitem="7"
			else
				subnextitem="6"
			fi
		else
			subnextitem="6"
		fi
	else
		subnextitem="6"
	fi
}
addusr(){
	addusrinpbx
	if [ $exitstatus == 0 ];then
		inputcontent="$inputusrname"
		blankcheck
		if [ "$blankcheck" == "pss" ]; then
			usrexistcheck
			if [ "$usrexistcheck" == "pss" ]; then
				usrpw
			else
				subnextitem="7"
			fi
		else
			subnextitem="7"
		fi
	else
		subnextitem="7"
	fi
}
usrexistcheck(){
	cat /etc/passwd | awk -F ":" '{print $1}' > userlist
	u=$(grep "$inputusrname" userlist)
	rm -f userlist
	if [ "$u" == "" ]; then
		usrexistcheck="pss"
	else
		usrexistcheckmsg
		usrexistcheck="err"
	fi
}
usrpw(){
	usrpwinpbx
	if [ $exitstatus == 0 ];then
		inputcontent="$inputusrpw"
		blankcheck
		if [ "$blankcheck" == "pss" ]; then
			retypeone="$inputusrpw"
			retypeusrpwinpbx
			retypetwo="$inputretypeusrpw"
			retypecheck
			if [ "$retypecheck" == "pss" ]; then
				arch-chroot /mnt useradd -m -G wheel $inputusrname
				sed -i 's/# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/g' /mnt/etc/sudoers
				echo "$inputusrname:$inputusrpw" | arch-chroot /mnt chpasswd
				setdonemsgtit="$addusrtit" && setdonemsg
				addusrnum="7*"
				subnextitem="8"
			else
				subnextitem="7"
			fi
		else
			subnextitem="7"
		fi
	else
		subnextitem="7"
	fi
}
blinstall(){
	if [ "$bltype" == "uefi" ]; then
		arch-chroot /mnt bootctl --path=/boot install
		cp -f /usr/share/systemd/bootctl/arch.conf /mnt/boot/loader/entries
		blkid -s PARTUUID -o value "$rootdir" > partuuid
		partuuid=$(cat partuuid)
		rm -f partuuid
		sed -i 's/PARTUUID=XXXX/PARTUUID='"$partuuid"' rw/' /mnt/boot/loader/entries/arch.conf
		rootfs=$(lsblk -f $rootdir | awk 'NR==2{print $2}')
		if [ "$rootfs" == "btrfs" ];then
			sed -i 's/rootfstype=XXXX add_efi_memmap/rootflags=subvol=\//' /mnt/boot/loader/entries/arch.conf
		else
			sed -i 's/rootfstype=XXXX add_efi_memmap//' /mnt/boot/loader/entries/arch.conf
		fi
	else
		arch-chroot /mnt pacman -S grub --noconfirm
		echo $rootdir > grubdir
		sed -i 's/[0-9]//g' grubdir
		grubdir=$(cat grubdir)
		rm -f grubdir
		arch-chroot /mnt grub-install --target=i386-pc "$grubdir"
		arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
	fi
	blinstallnum="8*"
}

#(Menu)
inmainmenu(){
	selectmain=$(whiptail --backtitle "$backtit" --default-item "$nextitem" --menu "$mainmenutxt" --nocancel --ok-button "$enterbut" --title "$mainmenutit" 0 0 0 \
	"$onenum" "$netmenutit" \
	"$twonum" "$diskmenutit" \
	"$threenum" "$installgaugetit" \
	"$fournum" "$confmenutit" \
	"" "$exitchecktit" \
	3>&1 1>&2 2>&3)
	progresscheck
}
innetmenu(){
	selectnet=$(whiptail --backtitle "$backtit" --default-item "$subnextitem" --menu "$netmenutxt" --nocancel --ok-button "$enterbut" --title "$netmenutit""(1/5)" 0 0 0 \
	"$setnetnum" "$setnettit" \
	"$setmirrornum" "$setmirrortit" \
	"" "$backmainmenutit" \
	3>&1 1>&2 2>&3)
}
indiskmenu(){
	syncdiskinfo
	selectdisk=$(whiptail --backtitle "$backtit" --default-item "$subnextitem" --menu "$diskmenutxt""$diskinfo" --nocancel --ok-button "$enterbut" --title "$diskmenutit""(2/5)" 0 0 0 \
	"1" "$partitiondevtit" \
	"2" "$formatdevtit" \
	"3" "$mountdevtit" \
	"" "$backmainmenutit" \
	3>&1 1>&2 2>&3)
}
inconfmenu(){
	selectconf=$( whiptail --backtitle "$backtit" --default-item "$subnextitem" --menu "$confmenutxt" --nocancel --ok-button "$enterbut" --title "$confmenutit""(4/5)" 0 0 0 \
	"$genfstabnum" "$genfstabtit" \
	"$languagenum" "$languagetit" \
	"$kblayoutnum" "$kblayouttit" \
	"$timezonenum" "$timezonetit" \
	"$hostnamenum" "$hostnametit" \
	"$rootpwnum" "$rootpwtit" \
	"$addusrnum" "$addusrtit" \
	"$blinstallnum" "$bltyinstalltit" \
	"" "$backmainmenutit" \
	3>&1 1>&2 2>&3)
}
mirrorcountrymenu(){
	selectcountry=$(whiptail --backtitle "$backtit" --menu "" --nocancel --ok-button "$selectbut" --title "$mirrorcountrytit" 0 0 $(( $0 - 8 )) \
	"${countryarray[@]}" \
	3>&1 1>&2 2>&3)
}
mirrorservermenu(){
	selectserver=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$setmirrortit" 0 0 0 \
	"${serverlistarray[@]}" \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
selectdevmenu(){
	selectdevname=$(whiptail --backtitle "$backtit" --menu "" --nocancel --ok-button "$selectbut" --title "$selectdevtit" 0 0 0 \
	"${selectdevarray[@]}" \
	3>&1 1>&2 2>&3)	
}
formatdevmenu(){
	selectfs=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$formatseldevtit""$selectdevname""$toseldevtit" 0 0 0 \
	"btrfs" "" \
	"ext3" "" \
	"ext4 (Recommend)" "" \
	"swap" "" \
	"vfat (ESP)" "" \
	"xfs" "" \
	"GRUB Reserved" "" \
	3>&1 1>&2 2>&3)
}
mountdevmenu(){
	selectmp=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$mountseldevtit""$selectdevname""$toseldevtit" 0 0 0 \
	"/ (Required)" "" \
	"/boot (ESP)" "" \
	"/home" "" \
	"/var" "" \
	"/data" "" \
	"swap" "" \
	"DON'T Mount" "" \
	3>&1 1>&2 2>&3)
}
languagemenu(){
	selectlanguage=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$languagetit" 0 0 0 \
	"${languagearray[@]}" \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
kblayoutmenu(){
	selectkblayout=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$kblayouttit" 0 0 0 \
	"${kblayoutarray[@]}" \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
regionmenu(){
	selectregion=$(whiptail --backtitle "$backtit" --menu "" --nocancel --ok-button "$selectbut" --title "$regiontit" 0 0 0 \
	"${regionarray[@]}" \
	3>&1 1>&2 2>&3)
}
timezonemenu(){
	selecttimezone=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --menu "" --ok-button "$okbut" --title "$timezonetit" 0 0 0 \
	"${timezonearray[@]}" \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}

#(Good Message Box)
welcomemsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$welcomemsgtxt" --ok-button "$okbut" --title "$welcomemsgtit" 0 0
	nextitem="1"
}
netokmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$netokmsgtxt" --ok-button "$okbut" --title "$setnettit" 0 0
}
diskmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$diskmsgtxt" --ok-button "$okbut" --title "$diskmsgtit" 0 0
}
installstartmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$installstartmsgtxt""$rootdir""$installstartmsgtxttwo" --ok-button "$okbut" --title "$installgaugetit""(3/5)" 0 0
}
installdonemsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$installdonemsgtxt" --ok-button "$okbut" --title "$installgaugetit""(3/5)" 0 0
}
setdonemsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$setdonemsgtxt" --ok-button "$okbut" --title "$setdonemsgtit" 0 0
}
exitrebootmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$exitrebootmsgtxt" --ok-button "$rebootbut" --title "$exitchecktit" 0 0
}

#(Bad Message Box)
progresscheckmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$progresscheckmsgtxt" --ok-button "$okbut" --title "$progresscheckmsgtit" 0 0
}
neterrormsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$neterrormsgtxt" --ok-button "$exitbut" --title "$setnettit" 0 0
}
mountmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$mountmsgtxt" --ok-button "$okbut" --title "$mounterrormsgtit" 0 0
}
installmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$installmsgtxt" --ok-button "$okbut" --title "$installerrormsgtit" 0 0
}
blankcheckmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$blankcheckmsgtxt" --ok-button "$okbut" --title "$blankcheckmsgtit" 0 0
}
retypecheckmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$retypecheckmsgtxt" --ok-button "$okbut" --title "$retypecheckmsgtit" 0 0
}
usrexistcheckmsg(){
	whiptail \
	--backtitle "$backtit" --msgbox "$usrexistcheckmsgtxt" --ok-button "$okbut" --title "$usrexistcheckmsgtit" 0 0
}

#(Yesno Box)
execagainyesno(){
	execagain=$(whiptail --backtitle "$backtit" --defaultno --no-button "$nobut" --title "$execagainyesnotit" --yesno "$execagainyesnotxt" --yes-button "$yesbut" 0 0 \
	3>&1 1>&2 2>&3 value=$?)
	execagain=$?
}
exitrecheckyesno(){
	exityesno=$(whiptail --backtitle "$backtit" --defaultno --no-button "$nobut" --title "$exitchecktit" --yesno "$exityesnotxt" --yes-button "$yesbut" 0 0 \
	03>&1 1>&2 2>&3 value=$?)
	exityesno=$?
}
formatcheckyesno(){
	formatcheck=$(whiptail --backtitle "$backtit" --defaultno --no-button "$nobut" --title "$formatseldevtit""$selectdevname""$toseldevtit""$selectfs" --yesno "$formatcheckyesnotxt""$selectdevname""$formatcheckyesnotxttwo" --yes-button "$yesbut" 0 0 \
	3>&1 1>&2 2>&3 value=$?)
	formatcheck=$?
}

#(Input Box)
sethostnameinpbx(){
	inputhostname=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --inputbox "$hostnametxt" --ok-button "$okbut" --title "$hostnametit" 0 0 \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
rootpwinpbx(){
	inputrootpw=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --ok-button "$okbut" --passwordbox "$rootpwtxt" --title "$rootpwtit" 8 0 \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
retyperootpwinpbx(){
	inputretyperootpw=$(whiptail --backtitle "$backtit" --nocancel --ok-button "$okbut" --passwordbox "$retyperootpwtxt" --title "$retyperootpwtit" 8 0 \
	3>&1 1>&2 2>&3)
}
addusrinpbx(){
	inputusrname=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut"  --inputbox "$addusrtit" --ok-button "$okbut" --title "$addusrtit" 0 0 \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
usrpwinpbx(){
	inputusrpw=$(whiptail --backtitle "$backtit" --cancel-button "$cancelbut" --ok-button "$okbut" --passwordbox "$usrpwtxt""$inputusrname""$usrpwtxttwo" --title "$usrpwtit""$inputusrname""$usrpwtittwo" 8 0 \
	3>&1 1>&2 2>&3)
	exitstatus=$?
}
retypeusrpwinpbx(){
	inputretypeusrpw=$(whiptail --backtitle "$backtit" --nocancel --ok-button "$okbut" --passwordbox "$retypeusrpwtxt""$inputusrname""$retypeusrpwtxttwo" --title "$retypeusrpwtit""$inputusrname""$retypeusrpwtittwo" 8 0 \
	3>&1 1>&2 2>&3)
}

#(Other)
syncdiskinfo(){
	#Disk List
	ls /dev/[sh]d* -l |awk '{print $10}' > disk
	sed -i 's/[0-9]//g' disk
	uniq disk > disklist
	rm -f disk
	#Partition List
	rm -f partitionlist
	rm -f diskallpart
	rm -f boottype
	rm -f canboot
	items=$(cat disklist)
	for item in $items; do
		lsblk -l "$item" -o NAME -n | awk 'NR>1' >> partitionlist
		lsblk -l "$item" -o NAME -n >> diskallpart
		fdisk -l "$item" | awk 'NR>9{print $6}' >> boottype
	done
	sed -i 's/^/\/dev\//' partitionlist
	sed -i 's/^/\/dev\//' diskallpart
	#GRUB Reserved
	grep -n -Fx "BIOS" boottype | awk 'BEGIN{FS=":"}NR>0{print $1}' > bootlinenum
	echo "" > canboot
	items=$(cat bootlinenum)
	for item in $items; do
		cat partitionlist | awk 'NR=='"$item"'{print $1}' >> canboot
	done
	rm -f boottype
	rm -f bootlinenum
	#Generate Disk Info
	rm -f diskinfo
	items=$(cat diskallpart)
	for item in $items; do
		itemtypecheck=$(echo "$item" | sed 's/[a-z]//g' | sed 's/\///g')
		if [ "$itemtypecheck" == "" ]; then
			itemtype="disk"
		else
			itemtype="part"
		fi
		partname=$item
		for (( b=$(echo ${#partname}); b<12; b++ )); do
				partname=$partname"%"
		done
		partsize=$(lsblk $item | awk 'NR==2{print $4}')
		for (( b=$(echo ${#partsize}); b<8; b++ )); do
				partsize=$partsize"%"
		done
		partfs=$(lsblk -f $item | awk 'NR==2{print $2}')
		if [ "$partfs" == "" ]; then
			if [ "$itemtype" == "disk" ]; then
				partfs="%%%%%%%%%%%%%%%%"
			else
				partfs="Not Formatted"
			fi
		fi
		for (( b=$(echo ${#partfs}); b<16; b++ )); do
			partfs=$partfs"%"
		done
		partmp=$(lsblk -f $item | awk 'NR==2{print $6}')
		partswap=$(lsblk -f $item | awk 'NR==2{print $4}')
		if [ "$partmp" == "" ]; then
			if [ "$itemtype" == "disk" ]; then
				partmp="%%%%%%%%%%%%%%%%"
			else
				partmp="Not Mounted"
			fi
		fi
		if [ "$partswap" == "[SWAP]" ]; then
			partmp="swap"
		fi
		for (( b=$(echo ${#partmp}); b<16; b++ )); do
			partmp=$partmp"%"
		done
		#GRUB Reserved
		grubreserved=$(grep -Fx "$item" canboot)
		if [ "$grubreserved" != "" ]; then
			partfs="GRUB Reserved%%%"
			partmp="GRUB Reserved%%%"
		fi
		echo "	""$partname""	""$partsize""	""$partfs""	""$partmp" >> diskinfo
	done
	sed -i 's/%/ /g' diskinfo
	sed -i 's/\/mnt/\/mnt\//g' diskinfo
	sed -i 's/\/\//\//g' diskinfo
	sed -i 's/\/mnt//g' diskinfo
	setdiskinfo
	rm -f diskinfo
	rm -f disklist
	rm -f partitionlist
	rm -f diskallpart
	rm -f canboot
}
setdiskinfo(){
	diskinfo=$(cat diskinfo)
	disklist=$(cat disklist)
	partitionlist=$(cat partitionlist)
	canboot=$(cat canboot)
}
rootdir() {
	linenum=$(mount | awk '{print $3}' | grep -n -Fx "/mnt" | awk 'BEGIN{FS=":"}NR==1{print $1}')
	rootdir=$(mount | awk 'NR=='"$linenum"'{print$1}')
}
progresscheck(){
	if [ "$onenum" == "1*" ]; then
		progress="1"
	fi
	if [ "$twonum" == "2*" ]; then
		progress="2"
	fi
	if [ "$onenum" == "1*" ] && [ "$twonum" == "2*" ]; then
		progress="12"
	fi
	if [ "$onenum" == "1*" ] && [ "$twonum" == "2*" ] && [ "$threenum" == "3*" ]; then
		progress="123"
	fi
	if [ "$onenum" == "1*" ] && [ "$twonum" == "2*" ] && [ "$threenum" == "3*" ] && [ "$fournum" == "4*" ]; then
		progress="1234"
	fi
}
progresscheckinstall(){
	case $progress in
		"1")
			progresscheckmsgtxt="$progresscheckdiskmsgtxt"
			progresscheckmsg
			nextitem="2"
		;;
		"2")
			progresscheckmsgtxt="$progresschecknetmsgtxt"
			progresscheckmsg
			nextitem="1"
		;;
		"12")
			nextitem="4"
			installwholecheck
		;;
		"")
			progresscheckmsgtxt="$progresschecknetdiskmsgtxt"
			progresscheckmsg
			nextitem="1"
		;;
	esac
}
progresscheckconf(){
	if [ "$progress" == "123" ] || [ "$progress" == "1234" ]; then
		nextitem=""
		subnextitem="1"
		confmenu
	else
		progresscheckmsgtxt="$progresscheckmsgconftxt"
		progresscheckmsg
		nextitem="3"
	fi
}
progressaddnet(){
	if [ "$setnetnum" == "1*" ] && [ "$setmirrornum" == "2*" ]; then
		onenum="1*"
	fi
}
progressadddisk(){
	twonum="2*"
}
progressaddinstall(){
	if [ "$setnetnum" == "1*" ] && [ "$setmirrornum" == "2*" ]; then
		onenum="1*"
		twonum="2*"
		threenum="3*"
	fi
}
progressaddconf(){
	if [ "$genfstabnum" == "1*" ] && [ "$languagenum" == "2*" ] && [ "$kblayoutnum" == "3*" ] && [ "$timezonenum" == "4*" ] && [ "$hostnamenum" == "5*" ] && [ "$rootpwnum" == "6*" ] && [ "$addusrnum" == "7*" ] && [ "$blinstallnum" == "8*" ]; then
		fournum="4*"
	fi
}
detectefi(){
	if [ -x /sys/firmware/efi/efivars ]; then
		bltype="uefi"
		blmode="UEFI Mode"
		diskmsgtxt="$diskmsguefitxt"
		bltyinstalltit="$blinstalluefitit"
	else
		bltype="bios"
		blmode="BIOS Mode"
		diskmsgtxt="$diskmsgbiostxt"
		bltyinstalltit="$blinstallbiostit"
	fi
}
exitcheck(){
	if [ "$progress" == "1234" ]; then
		installgnome
		exitrebootmsg
		umount -l -f -q /mnt
		#clear
		reboot
		exit
	else
		exitrecheckyesno
		if [ "$exityesno" != 0 ]; then
			nextitem=""
			mainmenu
			#clear
		fi
	fi
}
blankcheck(){
	if [ "$inputcontent" == "" ]; then
		blankcheckmsg
		blankcheck="err"
	else
		blankcheck="pss"
	fi
}
retypecheck(){
	if [ "$retypeone" == "$retypetwo" ]; then
		retypecheck="pss"
	else
		retypecheckmsg
		retypecheck="err"
	fi
}

#(Language)
langenus(){
	#Main Menu Title
	mainmenutit="Main Menu"
	netmenutit="Network Setting"
	diskmenutit="Disk Partition"
	installgaugetit="System Installation"
	confmenutit="System Configuration"

	#Main Menu Text
	mainmenutxt="Please select an item to execution.\n* means this item had been exectuted."
	netmenutxt="This part will help you done the network and mirror server settings.\n* means this item had been exectuted."
	diskmenutxt="This part will help you partition the disks, format the partitions and mount them.\nList of the available disk and partitions:\n\n	[List Items]	[Size]  	[Format]        	[Mount Point]   \n"
	installgaugetxt="Please wait while installation in progress..."
	confmenutxt="This part will help you done the localization and personalize settings.\n* means this item had been exectuted."

	#Network Title
	setnettit="Confirm The Network Setting"
	setmirrortit="Set The Mirror Server"
	mirrorcountrytit="Select Your Country"

	#Network Text
	netokmsgtxt="Network setting confirmed."
	neterrormsgtxt="Please set the network connection before the system installation.\nThe installer will stop."

	#Disk Title
	diskmsgtit="Partition Instruction"
	partitiondevtit="Manual Partition (cfdisk)"
	formatdevtit="Format The Partitions"
	mountdevtit="Mount The File Systems"
	selectdisktit="Select A Disk To Partition"
	selectformattit="Select A Partition To Format"
	selectmounttit="Select A Partition To Mount"
	formatseldevtit="Format "
	mountseldevtit="Mount "
	toseldevtit=" To "
	mounterrormsgtit="Mount Error"

	#Disk Text
	diskmsguefitxt="The 2 partitions are necessary:\n\n1. Partition the system partition and mount it on /.\n   The system installation requires at least 4.5 GiB of free space.\n\n2. Partition a ESP (EFI System Partition) and mount it on /boot.\n   The size of ESP is about 256-512 MiB and the format is VFAT.\n\nPS: Swap space or an independent /home partition is optional."
	diskmsgbiostxt="The 2 partitions are necessary:\n\n1. Partition the system partition and mount it on /.\n   The system installation requires at least 4.5 GiB of free space.\n\n2. Partition a 1 MiB space and format it to GRUB Reserved at the same disk as /.\n   And the GRUB Reserved doesn't need to mount.\n\nPS: Swap space or an independent /home partition is optional."
	formatcheckyesnotxt="All data on "
	formatcheckyesnotxttwo=" will be lost."
	rootmountmsgtxt="Haven't set the / mount point."
	swapmountmsgtxt="You can't use a swap partition as a mount point."
	formatmountmsgtxt="Format the partition before mount it."
	grubmountmsgtxt="You can't use a GRUB Reserved partition as a mount point."

	#Install Title
	installerrormsgtit="Install Error"
	

	#Install Text
	rootcheckmsgtxt="The / mount point is required for system installation."
	sizecheckmsgtxt="System installation requires at least 4.5 GiB of free space."
	bootcheckmsgtxt="You haven't set the boot partition or GRUB Reserved."

	installstartmsgtxt="The system will be downloaded and installed to "
	installstartmsgtxttwo="."
	installdonemsgtxt="Installation complete."

	#Configure First Level Title
	genfstabtit="Generate A Fstab File"
	languagetit="Set The Language"
	kblayouttit="Set The Keyboard Layout"
	regiontit="Select Your Region"
	timezonetit="Set The Timezone"
	hostnametit="Set The Hostname"
	rootpwtit="Set The Root Password"
	addusrtit="Creat An Account"
	blinstalluefitit="Install systemd-boot (UEFI)"
	blinstallbiostit="Install GRUB (BIOS)"

	#Configure First Level Text
	hostnametxt="Please type the hostname."
	rootpwtxt="Please type the root password."
	addusrtxt="Please type the user's name to create an account."

	#Configure Second Level Title
	retyperootpwtit="Re-type The Root Password"
	usrpwtit="Set "
	usrpwtittwo="'s Password"
	retypeusrpwtit="Re-type "
	retypeusrpwtittwo="'s Password"

	#Configure Second Level Text
	retyperootpwtxt="Please re-type the root password to confirm."
	usrpwtxt="Please type "
	usrpwtxttwo="'s password."
	retypeusrpwtxt="Please re-type "
	retypeusrpwtxttwo="'s password to confirm."


	#Others Title
	welcomemsgtit="Welcome"
	exitchecktit="Exit The Installer"
	progresscheckmsgtit="Something Haven't Done"
	execagainyesnotit="Had Been Exectuted"
	blankcheckmsgtit="Nothing Input"
	retypecheckmsgtit="Password Not Match"
	usrexistcheckmsgtit="User Exist"


	backmainmenutit="Back To The Main Menu"

	#Others Text
	welcomemsgtxt="Welcome to the Arch Linux Installer.\nThis application will help you install the Arch Linux.\nPlease be sure to confirm that the network connection is available.\n\nUse UP and Down arrows to navigate menus.\nUse TAB to switch buttons.\nUse ENTER to execute the selected item."
	exityesnotxt="Installation hasn't been completed, are you sure to exit the installer?"
	exitrebootmsgtxt="Don't forget to remove the installation media to avoid re-entering the installer."
	progresschecknetdiskmsgtxt="The network setting and disk partition haven't done."
	progresschecknetmsgtxt="The network setting haven't done."
	progresscheckdiskmsgtxt="The disk partition haven't done."
	progresscheckmsgconftxt="The system installation haven't done."
	execagainyesnotxt="This item had been exectuted, do you want to exectute again?"
	blankcheckmsgtxt="Please confirm the input content."
	retypecheckmsgtxt="The passwords entered twice are different."
	usrexistcheckmsgtxt="The user name is exist."


	setdonemsgtxt="Done."

	#Info Text
	loaddiskinfo="Loading the partitions..."
	formatdiskinfo="Formating "
	formatdiskinfotwo=" to "
	formatdiskinfothree=" ..."
	checkinstallinfo="Checking the partitions..."
	loadlistinfo="Loading the list..."
	detectnetworkinfo="Detecting the network..."
	installblinfo="Installing the boot loader to "
	installblinfotwo=" ..."
	setlanginfo="Setting the language..."
	genfstabinfo="Generating the fstab file..."

	#Buttons
	enterbut="Enter"
	exitbut="Exit"
	backbut="Back"
	selectbut="Select"
	okbut="Ok"
	cancelbut="Cancel"
	yesbut="Yes"
	nobut="No"
	rebootbut="Reboot"

	#Numbers
	onenum="1"
	twonum="2"
	threenum="3"
	fournum="4"
	setnetnum="1"
	setmirrornum="2"
	genfstabnum="1"
	languagenum="2"
	kblayoutnum="3"
	timezonenum="4"
	hostnamenum="5"
	rootpwnum="6"
	addusrnum="7"
	blinstallnum="8"
}

#Gnome
installgnome(){
	wantgnome=$( whiptail --backtitle "$backtit" --defaultno --no-button "$nobut" --title "Install the Gnome Desktop Environment" --yesno "Do you want to install the Gnome Desktop Environment ?" --yes-button "$yesbut" 0 0 \
	3>&1 1>&2 2>&3 value=$?)
	wantgnome=$?
	if [ "$wantgnome" == "0" ]; then
		arch-chroot /mnt pacman -S --noconfirm bash-completion gnome gnome-software-packagekit-plugin adobe-source-han-sans-tw-fonts adobe-source-han-sans-cn-fonts ibus-chewing
		arch-chroot /mnt pacman -S --noconfirm virtualbox-guest-modules-arch virtualbox-guest-utils
		arch-chroot /mnt systemctl enable gdm.service
		echo "NoDisplay=true" >> /mnt/usr/share/applications/avahi-discover.desktop
		echo "NoDisplay=true" >> /mnt/usr/share/applications/qv4l2.desktop
		echo "NoDisplay=true" >> /mnt/usr/share/applications/qvidcap.desktop
		echo "NoDisplay=true" >> /mnt/usr/share/applications/org.freedesktop.IBus.Setup.desktop
		echo "NoDisplay=true" >> /mnt/usr/share/applications/bssh.desktop
		echo "NoDisplay=true" >> /mnt/usr/share/applications/bvnc.desktop
	fi
}

#(Execute)
clear
langenus
detectefi
backtit
welcomemsg
mainmenu